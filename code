#include <opencv2/opencv.hpp>
#include <iostream>
#include <string>

using namespace cv;
using namespace std;

void set_and(Mat input1, Mat input2, Mat output)//集合交运算
{
	int a = input1.rows;
	int b = input1.cols;
	for (int i = 0; i < a; i++)
	{
		for (int j = 0; j < b; j++)
		{
			output.at<uchar>(i, j) = input1.at<uchar>(i, j) * input2.at<uchar>(i, j) / 255;
		}
	}
}

void set_or(Mat input1, Mat input2, Mat output)//集合并运算
{
	int a = input1.rows;
	int b = input1.cols;
	for (int i = 0; i < a; i++)
	{
		for (int j = 0; j < b; j++)
		{
			if (input1.at<uchar>(i, j) == 0 && input2.at<uchar>(i, j) == 0)
			{
				output.at<uchar>(i, j) = 0;
			}
			else
			{
				output.at<uchar>(i, j) = 255;
			}
		}
	}
}

void set_not(Mat input, Mat output)//集合补
{
	int a = input.rows;
	int b = input.cols;
	for (int i = 0; i < a; i++)
	{
		for (int j = 0; j < b; j++)
		{
			if (input.at<uchar>(i, j) == 0)
			{
				output.at<uchar>(i, j) = 255;
			}
			else
			{
				output.at<uchar>(i, j) = 0;
			}

		}
	}
}


int main()
{
	char a[10];
	Mat kenel = Mat::ones(3, 3, CV_8UC1);
	Mat img1;
	do
	{
		char m[100];
		cout << "请输入图片路径：" << endl;
		cin.getline(m, 100);
		img1 = imread(m, 0);
	} while (img1.empty());
	Mat img2(img1.size(), CV_8UC1);
	erode(img1, img2, kenel, Point(-1, -1));//腐蚀处理
	set_not(img2, img2);
	set_and(img1, img2, img2);//集合的差
	imwrite("F://边界提取.tif", img2);
	imshow("原图", img1);
	imshow("处理后图像", img2);
	waitKey();
	return 0;
}
